name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
 
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run linting
      run: |
        flake8 . --extend-ignore=W503,E203 --max-line-length=120 --exclude=.git,__pycache__,.venv
      continue-on-error: true
    
    - name: Run tests
      env:
        BLUESKY_USERNAME: ${{ secrets.BLUESKY_USERNAME }}
        BLUESKY_PASSWORD: ${{ secrets.BLUESKY_PASSWORD }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
        PYTHONWARNINGS: "ignore::DeprecationWarning,ignore::PytestDeprecationWarning,ignore::PytestUnhandledCoroutineWarning"
      run: |
        # Create pytest.ini if it doesn't exist
        echo "[pytest]" > pytest.ini
        echo "asyncio_mode = strict" >> pytest.ini
        echo "asyncio_default_fixture_loop_scope = function" >> pytest.ini
        echo "filterwarnings =" >> pytest.ini
        echo "    ignore::DeprecationWarning" >> pytest.ini
        echo "    ignore::PytestDeprecationWarning" >> pytest.ini
        echo "    ignore::PytestUnhandledCoroutineWarning" >> pytest.ini
        
        # Run tests
        pytest -v --junitxml=test-results.xml || true

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: test-results.xml

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run security scan
      run: |
        # Create .bandit file to ignore specific warnings
        echo "[bandit]" > .bandit
        echo "skips = B311" >> .bandit
        
        # Run security scans with customized settings
        bandit -r app/ -ll || true  # -ll means only report high and medium severity issues
        safety check --full-report || true

    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: |
          bandit-report.json
          safety-report.txt